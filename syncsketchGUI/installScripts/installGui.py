import glob
import os
import platform
import re
import shutil
import logging
import subprocess
import sys
import tempfile
import webbrowser
import zipfile
from functools import partial
import ssl

import json

from maya import cmds

try:
    # python3
    from urllib.request import urlopen, Request
except ImportError:
    # python2
    from urllib2 import urlopen, Request

try:
    # python3
    from importlib import reload
except ImportError:
    pass

try:
    MAYA_API_VERSION = int(str(cmds.about(apiVersion=True))[:4])
except Exception as error:
    print("Error: {}".format(error))
    MAYA_API_VERSION = 2022

# Mac does not have certificates installed by default, so we need to disable SSL verification
unverified_ssl_context = ssl.create_default_context()
unverified_ssl_context.check_hostname = False
unverified_ssl_context.verify_mode = ssl.CERT_NONE

# cant use Qt.py as we have not installed requirements yet
if MAYA_API_VERSION >= 2017:
    from PySide2.QtCore import *
    from PySide2.QtWidgets import *
    from PySide2.QtGui import *
    from shiboken2 import wrapInstance
else:
    # Unsupported version
    from PySide.QtCore import *
    from PySide.QtGui import *

from maya import OpenMayaUI as omui

INSTALL_SSGUI_ONLY = False

if os.getenv("SS_DEV"):
    VERSION_TAG = os.getenv("SS_DEV")
else:
    # get version tag from latest release from GitHub
    req = Request('https://github.com/syncsketch/syncsketch-maya/releases/latest')
    req.add_header('Accept', 'application/json')
    content = json.loads(urlopen(req, context=unverified_ssl_context).read())
    VERSION_TAG = content['tag_name']

if os.environ.get("SYNCSKETCH_GUI_SOURCE_PATH"):
    SYNCSKETCH_GUI_SOURCE_PATH = os.environ.get("SYNCSKETCH_GUI_SOURCE_PATH")
else:
    SYNCSKETCH_GUI_SOURCE_PATH = "git+https://github.com/syncsketch/syncsketch-maya.git@{}".format(VERSION_TAG)


def _get_install_version():
    if SYNCSKETCH_GUI_SOURCE_PATH.startswith("git+"):
        url = "https://raw.githubusercontent.com/syncsketch/syncsketch-maya/{}/syncsketchGUI/version.py".format(
            VERSION_TAG)
    else:
        url = "file:///{}/syncsketchGUI/version.py".format(SYNCSKETCH_GUI_SOURCE_PATH)
    try:
        version_py_content = urlopen(url, context=unverified_ssl_context).read().decode()
        version = re.match(r'.*__version__ = \"(.*?)\"', version_py_content, re.DOTALL).group(1)
    except Exception as error:
        print("Error: {}".format(error))
        raise Exception("Could not get version from {}. Installation aborted!".format(url))

    return version


_VERSION = _get_install_version()

FFMPEG_API_ENDPOINT = "https://ffbinaries.com/api/v1/version/4.4.1"

SYNCSKETCH_MAYA_PLUGIN_REPO_URL = "https://github.com/syncsketch/syncsketch-maya"
SYNCSKETCH_MAYA_PLUGIN_VIDEO_URL = "https://vimeo.com/syncsketch/integrationmaya"
SYNCSKETCH_MAYA_PLUGIN_DOCS_URL = "https://support.syncsketch.com/article/62-maya-syncsketch-integration"

# ensure package that are compatible with both python2 and python3
PY_REQUIREMENTS = ['"requests>2,<2.28.0"', '"syncsketch>1,<2.0"', '"pyyaml>5,<6.0"']


def _get_configured_log():
    log = logging.getLogger("syncsketchGUI_install")
    log.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()

    formatter = logging.Formatter('[%(asctime)s - %(filen'
                                  'ame)s:%(lineno)s - %(levelname)s - %(message)s]',
                                  "%Y-%m-%d %H:%M:%S")
    ch.setFormatter(formatter)

    log.addHandler(ch)
    # prevent logging from bubbling up to maya's logger
    log.propagate = 0

    return log


LOG = _get_configured_log()


def get_mayapy_path():
    if Literals.PLATFORM == "Windows":
        mayapy_path = os.path.join(os.environ["MAYA_LOCATION"], "bin", "mayapy.exe")
    elif Literals.PLATFORM in ["Darwin", 'Linux']:
        mayapy_path = os.path.join(os.environ["MAYA_LOCATION"], "bin", "mayapy")
    else:
        raise Exception("Unsupported platform: {}".format(Literals.PLATFORM))

    return os.path.normpath(mayapy_path)


def get_maya_module_path():
    maya_module_path = os.path.join(os.environ["MAYA_APP_DIR"], str(MAYA_API_VERSION), "modules")
    return os.path.normpath(maya_module_path)


def get_install_folder_path():
    maya_module_path = get_maya_module_path()
    install_path = os.path.join(maya_module_path, "syncsketch-{}".format(_VERSION))

    return os.path.normpath(install_path)


class InstallOptions(object):
    def __init__(self):
        pass

    install_shelf = True
    upgrade = False
    tokenData = {}


class Icon:
    def __init__(self, base64Image):
        self.base64Image = base64Image

    def base64ToQPixmap(self):
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(self.base64Image))
        return pixmap


class Resources(object):
    def __init__(self):
        pass

    # GIFDEVICE = None
    preloader_anim_base64 = b""""""
    byte_arrase_gif = QByteArray.fromBase64(preloader_anim_base64)
    GIFDEVICE = QBuffer(byte_arrase_gif)
    # log.debug("device successfully opened: {0}".format(Resources.GIFDEVICE.open(QIODevice.ReadOnly)))

    companyLogoBase64 = b""""""
    companyLogo = QPixmap(Icon(companyLogoBase64).base64ToQPixmap())

    base64Image = b"""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"""
    Olaf = QPixmap(Icon(base64Image).base64ToQPixmap())

    base64Image = b"""iVBORw0KGgoAAAANSUhEUgAAAFgAAABYCAYAAABxlTA0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBAJqcGAAAA2NJREFUeJztnN9RGzEQh3+ryTvuIHQAqSCOzn4OJUAFoYO4BKeCpAR4PkvjdGA6oATTgDYvx4xjwv3x7Z7kyX5v3N5I6w8h6eQ9AMMwDMMwDMMwDMMwDMMwDON/gHIn0JcY4+fDn733v3PlMoTiBdd1feGcewYwO7zOzNvFYvElT1b9cbkT6MI5t8aRXAAgonkI4XuGlAZRvGAANy2x+8myOJFzEPxm9PaMFcE5CD5rTLAyJlgZE6yMCVbGBCtjgpX5oNHoZrP5hr8fEPbOuZX3/kmjv6HEGK9SSuvDa865tff+Ubov8bOIGONXZn74R+g5pXS9XC5fhrQXQuC2eFVVgz5Dc7axA3B5FNoT0Vx6EIhPESml1TuhSyLa1nV9Id1nX+q6viCiLd7KBYDZ8aiWQFwwEV23xXJJfpXbkd9cut/JF7kckvvI1UJcMDNvu+6ZUvIQuX1yH4q4YOfcPYB9131TSB44cvdN7qKIC/bePzVzWVbJQ+Vq7CAApTk4t+RS5AKKi1wuySXJBZR3EVNLLk0uMME2bSrJJcoFJtoHa0suVS4wcV1EjPGq2Wt2flnJzDtmnjvnWn8pKaVZqXKBDIUnQyV3ietzT8PkcoFMlT1DJAuRRS6QsXRqQsnZ5AKZa9MmkJxVLlBA8Z+i5OxygQIEAyqSi5ALFCIYEJVcjFygIMGAiOSi5AKFCQZGSS5OLiAoWLLE/wTJo+VqvaIwWrBWif8AyaPkar+iMPqwR6vEv+cB0eiRq/2KgsRpmlqJfyP59p2w1Jyr+oqChGDVEn/v/SMRXTPz7vUaM29TSpdCC5pq/iq1adI0Ij/lzuMU1A/cY4xX2n2cyvHOQYPRgruKNVJK87F9aJFSap1jJQpRRk8RRPTcEV9tNhsw86+hlZVahBA+MvOaiNoWOBDRri3eh9GCmXnbstIDwIyI1kS0DiGM7U4Mou5HgKYScxQSU8QDenyZeYbsJQqyRwtu/uzF62pzw8wriXZEdhEppfXhPvXcYebdYrH4IdGWiODlcvnCzHON8s+pYeYtM8+l2hM/rgwh/ARwK93uRPyqqupOskHxB42qqu6Y+RZntvAx8720XEDxwL0pZ7oBcNOcihX3rweaKe2hpD26YRiGYRiGYRiGYRiGYRiGYRiGYRjD+AN6etoeN+hk/AAAAABJRU5ErkJggg=="""
    installIcon = QPixmap(Icon(base64Image).base64ToQPixmap())

    base64Image = b"""iVBORw0KGgoAAAANSUhEUgAAAFgAAABYCAYAAABxlTA0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyNpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNS1jMDE0IDc5LjE1MTQ4MSwgMjAxMy8wMy8xMy0xMjowOToxNSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIChNYWNpbnRvc2gpIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkZFN0ZCOTgzMjEzNzExRTlBRjJDRTMwNUFDQzg3MDUyIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkZFN0ZCOTg0MjEzNzExRTlBRjJDRTMwNUFDQzg3MDUyIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RkU3RkI5ODEyMTM3MTFFOUFGMkNFMzA1QUNDODcwNTIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RkU3RkI5ODIyMTM3MTFFOUFGMkNFMzA1QUNDODcwNTIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6CenaqAAADF0lEQVR42uycTWsTURiFJ6FL9Qd0VRAUF1JKa6mC6EbwFyiIO5EillYXfiEKbhQCVgXRUks3UrAL125ctGBBWqjoQhCFoCbqhASsiAtdxHPhHQglaSY392vSc+AwyfTeyfTpy7n3TUJz9Xo9ouwpTwQETMAUARMwAVMETMAETBEwAVMETMAETBEwARMwRcAETMAUARMwRcC+1Of7Bo5cPury5V7A7+AryYnlwlJvA3aoBfi4uAjPMCLMwj3V8PwxfHFbRIQDPYNPNjk/DefkyArW1GILuInuYg04R8D6sXAixbhHgDxOwN1lbjvNAPJ1Ak6npx3CTTRBwO31BD6tMa8MD3IXYTYWEpXgETQcFVawebhf4WHAjbnImc/css3K7RXAC5qZ+0lVLlyxfYNZzuDZLjJ3DK6xVW6tOfiMZuaOuILrLCKwid8NXzKYuTpwywK34rIS8g7g7sDhJVzA4weeMrfsKnOdAgbQXTi8ggfk1CTO3XacuVX4IBxHHpS3DHetSYd0DT+70+HlHsJnNTN3SI5RzwAGwJ04rMJ7Wgy5ijH3Ul5uHj7fReaWfK7GfZYq9zW8t83QCxir/sBTttpfH5lrtYIBrF9iYV/KKZPwfcNwv8uCFkcByHREPN8iFlpJVfCtJpmru6CNhVC5tgDfgH9pzLupFj95PK2Zud8kFr6E1BEZBbxcWFL73VF4Q2O62r6p7yzofNpbklj4HFrLaXwXAcgfpJL+aEzf30Xm/gixp7eyTQNk9W7VIfif5fsPLnOdNRqA/FZ++d+WXqIWYuY6bZUBeV0gbFio3AMhZq5TwJsy+aehSybtbzHKgJy8XSmZPGogk6shtL/BARbIHyWTdSHXQml/gwTckMkK8l8NuJnIXK+AGyAPdZDJsexzi1EG5eVTZUB+nzKTVeYOZrFyvQJOmclJ5sZRhuX1exFbZHJmMzcowKL1TZVczXLmhghY6Q18DF6BD/dC5SbK8d/bbo8KJmCKgAmYgCkCJmCKgAmYgCkCJmACpgiYgAmYCAiYgCkCJmACpgiYgAmYMq3/AgwA+XHGcJ7d4J4AAAAASUVORK5CYII="""
    launchIcon = QPixmap(Icon(base64Image).base64ToQPixmap())

    base64Image = b"""iVBORw0KGgoAAAANSUhEUgAAAFgAAABYCAYAAABxlTA0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBAJqcGAAAA7lJREFUeJztm8tx2zAQhv9lA3YHdiqwO4iGpM5xB6Y7UAdRKohSQeQO5DMfo3Qgd6B0IDfAzSHgjOwhJQDCgvTMfleCXPIbEI8FACiKoiiKoiiKoiiKoiiKoiiKoiiKoijKECT14LqubwAUzDwDACLatW27nM/nb1IxbWia5o6ZF8x8a95rT0SrNE1fJeKJCK7r+ieARc+ldZZlTxIxbSjL8oqItkR0//EaEd1LSA4u2NSQ3Yki67ZtF7Frcl3XN8y86ZNr2GdZ9iV03CT0A5n54UyRgoi2ZVlehY49RNM0dwB2J+QCwK1EbAnBh3NliOg+lmTzR20BXEvH6iO44CRJtjblYkh2kXumWfMmuOA0TV+ZeWNTlojukyTZm184KFVVPRpptjV3HfodAAHBAMDMhUONuGbmbUjJVVU9EtHa4ZZ1nue/QsU/RkTwfD5/Y+aZ+T1tCCbZQ+5KcugoNtHoqOv6N4DCsviBmRd5nj97xhoaf/fCzIVvLFvEBQPOkr0+PEYMH6IIBmQFTFUuEFEw4NU+LrMs+zF00Ux910R0bnLTcSCimVTeoY+oggG/Hr6vEzqVVxggulxgBMHA5ZI/i1xgJMEA0DTNVzMhsZ4ItG27SJLk+kzS5h3MvCOihyzL/vq/rT+jCQbc8wRG1q1LeWaejZmDHlUwIJeMmYJcQGgm50Kapq9ENAuZbGHmzRTkAhOowR0eHdcQo66afGQygoEgkiclF5hAE3GMR5LoGNGkjS+TEgz8l0xEW8fbDh73RGFSTQTgnlc4JmaOwZZJCb5EbsfUJE9CcFmWV0mSrHCh3A6TUxZZoXBldMEBh2cfmcSIYtROzidp4/D4wjQ5ozKaYFe5Jg8xM7lfW9GjSx6lifBJ8hxPfS+9PybRBYeS81kkR20iPKRsh6R0SSIAe5tnxdyu9S5urEBmFWMFhwS7zSjAo6PcE9FDrNWNKIJDrcMNMeUlJHHB0nI7pipZVHBd198BLG3Lh5jmuu4kIqIiTdOXS2KeQvKMxmibQaa0EUVEsGuzIPGBrpJNxxe8JosM04hoaVn0QEQzidqTZdkTM1tvBGzbdhn6HQABwVVVPcLuvEPXyfwJ/Q4deZ7/YubCpqxAsgmAgGCzb+Ec0YZJeZ4/20qWQELwyeMDXdIm5jamPM+fLZJEe4nYImc0AKz6rnX5gDH2iKVp+mKm1n2S9w47NJ0QG6Y1TfOtbdvjTmbNzJuxN4P0HPHdj3EwUlEURVEURVEURVEURVEURVEURVEURVGAf9l4XANGvwF5AAAAAElFTkSuQmCC"""
    closeIcon = QPixmap(Icon(base64Image).base64ToQPixmap())


class Literals(object):
    def __init__(self):
        pass

    SYNCSKETCH_INSTALL_PATH = ""
    PLATFORM = ""


def get_maya_ui_parent():
    return wrapInstance(int(omui.MQtUtil.mainWindow()), QWidget)


class LinkButton(QPushButton):
    def __init__(self, text, link, *args, **kwargs):
        super(LinkButton, self).__init__(text, *args, **kwargs)
        self.setCursor(QCursor(Qt.PointingHandCursor))
        self.setFlat(True)
        self.setMaximumHeight(20)
        self.setStyleSheet("QPushButton {text-decoration: underline; color: #00c899}")
        self.clicked.connect(lambda: webbrowser.open(link, new=0, autoraise=True))


class IconButton(QPushButton):
    def __init__(self, text, highlight=False, icon=None, success=False, *args, **kwargs):
        super(IconButton, self).__init__(QIcon(icon), text, *args, **kwargs)

        self.icon = icon
        self.highlight = highlight
        self.success = success
        self.setMinimumHeight(34)
        self.setCursor(QCursor(Qt.PointingHandCursor))
        if self.highlight:
            self.setStyleSheet(
                "QPushButton{color: #161a1d; background-color: #00a07b; border: none; border-radius: 3px; padding: 10px;} QPushButton:hover {background-color: #00c899}"
            )
            font = self.font()
            font.setPointSize(14)
            font.setBold(True)
            self.setFont(font)

        if self.success:
            self.setStyleSheet(
                "QPushButton{color: #161a1d; background-color: #dfefd9; border: none; border-radius: 3px; padding: 10px;}"
            )
            font = self.font()
            font.setPointSize(14)
            font.setBold(True)
            self.setFont(font)

        if self.icon:
            self.setIconSize(QSize(22, 22))
            self.setIcon(QIcon(self.AlphaImage()))

    def AlphaImage(self):
        if self.highlight and not self.success:
            alpha_image = QPixmap(self.icon)
            painter = QPainter(alpha_image)

            painter.setCompositionMode(QPainter.CompositionMode_SourceIn)
            painter.fillRect(alpha_image.rect(), "182828")

            return alpha_image

        else:
            return QPixmap(self.icon)


class SyncSketchInstaller(QDialog):
    def __init__(self, parent=None, *args, **kwargs):
        if parent is None:
            parent = get_maya_ui_parent()
        super(SyncSketchInstaller, self).__init__(parent=parent, *args, **kwargs)

        size = [400, 350]
        name = "Syncsketch Maya Installer"

        width = size[0]
        height = size[1]
        desktop = QApplication.desktop()
        screen_number = desktop.screenNumber(QCursor.pos())
        screen_rect = desktop.screenGeometry(screen_number)
        width_center = screen_rect.width() / 2 - width / 2
        height_center = screen_rect.height() / 2 - height / 2
        self.setMinimumSize(QSize(*size))
        self.setGeometry(QRect(width_center, height_center, width, height))
        self.setWindowIcon(Resources.Olaf)

        self.setObjectName(name)
        self.setWindowTitle(name)
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)
        self.setWindowFlags(Qt.Tool)

        self._create_layout()

        self.install_button.clicked.connect(self.__syncsketch_install)
        self.close_button.clicked.connect(self.__close_button)
        self.launch_button.clicked.connect(self.__launch_button)

    def showit(self):
        # keep for backwards compatibility
        self.show()

    def clean(self):
        if Resources.GIFDEVICE.isOpen():
            Resources.GIFDEVICE.close()

    def closeEvent(self, event):
        self.clean()

    def check_box_changed(self, state, name):
        if name == "installShelf":
            InstallOptions.install_shelf = state

    def _create_layout(self):
        self.outer = QVBoxLayout()
        self.setLayout(self.outer)

        self.movie = QMovie()
        device = None
        if not Resources.GIFDEVICE.isOpen():
            LOG.debug(
                'Resources.GIFDEVICE successfully opened: {0}'.format(Resources.GIFDEVICE.open(QIODevice.ReadOnly)))
            if Resources.GIFDEVICE.isOpen():
                device = Resources.GIFDEVICE
        else:
            # will be true when re-opening the installer UI
            device = Resources.GIFDEVICE
        self.movie.setDevice(Resources.GIFDEVICE)

        self.animated_gif = QLabel()

        self.animated_gif.setMovie(self.movie)
        self.animated_gif.setMaximumHeight(24)
        self.animated_gif.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        self.animated_gif.setScaledContents(True)
        self.animated_gif.setMaximumWidth(24)
        self.movie.start()

        logo = QLabel()
        small_logo = Resources.companyLogo.scaled(240, 110, Qt.KeepAspectRatio, Qt.SmoothTransformation)

        logo.setPixmap(small_logo)
        logo.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        logo.setMargin(15)
        self.outer.addWidget(logo, 0)
        self.subtext = QLabel(
            u"Update Available: Would you like to upgrade to the latest?"
            if InstallOptions.upgrade
            else "SyncSketch Integration for Maya [{} cut]".format(VERSION_TAG),
            objectName='subtext'
        )
        self.outer.addWidget(self.subtext)
        self.subtext.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        self.subtext.setMargin(5)

        palette = self.palette()
        palette.setColor(self.backgroundRole(), "#2b353b")
        self.setPalette(palette)

        self.info_widget = QWidget()
        self.info_layout = QHBoxLayout()
        self.info_widget.setLayout(self.info_layout)
        self.info_layout.addStretch()
        self.info_layout.setContentsMargins(0, 0, 0, 0)
        self.info_layout.setSpacing(0)
        self.outer.addWidget(self.info_widget, 0)
        self.info_layout.setAlignment(Qt.AlignCenter | Qt.AlignCenter)

        if not InstallOptions.upgrade:
            tutorial_button = LinkButton("Tutorial Video", link=SYNCSKETCH_MAYA_PLUGIN_VIDEO_URL)
            self.info_layout.addWidget(tutorial_button, 0)

            repo_button = LinkButton("Github Repo", link=SYNCSKETCH_MAYA_PLUGIN_REPO_URL)
            self.info_layout.addWidget(repo_button, 0)

            documentation_button = LinkButton("Documentation", link=SYNCSKETCH_MAYA_PLUGIN_DOCS_URL)
            self.info_layout.addWidget(documentation_button, 0)
            upgrade_text = ""
        else:
            try:
                from syncsketchGUI.installScripts.maintenance import (
                    get_latest_setup_py_file_from_local,
                    get_latest_setup_py_file_from_repo,
                )

                from_version = get_latest_setup_py_file_from_local()
                to_version = get_latest_setup_py_file_from_repo()

                upgrade_text = u"Upgrading from {} to {}".format(from_version, to_version)
            except Exception as error:
                # for backwards compatibility, old versions of maintenance.py have different methods to get version info
                LOG.warning("Error while trying to get version info: {}".format(error))
                upgrade_text = u"Upgrading to latest version"

        self.upgrade_info = QLabel(upgrade_text, objectName='upgradeInfo')
        self.upgrade_info.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        self.upgrade_info.setMargin(5)
        self.upgrade_info.setStyleSheet("QLabel#upgradeInfo {color: #00c899; font: 14pt}")
        self.outer.addWidget(self.upgrade_info)

        if not InstallOptions.upgrade:
            self.upgrade_info.hide()

        spacer = QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.outer.addItem(spacer)

        self.install_shelf = QCheckBox("Create Syncsketch Shelf (recommended)", self)
        self.install_shelf.setChecked(True)
        self.install_shelf.stateChanged.connect(partial(self.check_box_changed, "installShelf"))
        subLayout2 = QVBoxLayout()
        subLayout2.setContentsMargins(0, 0, 0, 0)
        subLayout2.setSpacing(0)
        subLayout2.setAlignment(Qt.AlignCenter)

        self.outer.addLayout(subLayout2, 0)
        spacer = QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.info_layout.addItem(spacer)

        ButtonLayout = QHBoxLayout()
        ButtonLayout.setAlignment(Qt.AlignCenter)
        ButtonLayout.addWidget(self.install_shelf, 0)

        ButtonLayout.addStretch()
        self.outer.addLayout(ButtonLayout)
        self.install_button = IconButton("Upgrade" if InstallOptions.upgrade else "Install", highlight=True)

        self.launch_button = IconButton("Launch Syncsketch UI", highlight=True, success=True)
        self.launch_button.hide()

        self.close_button = IconButton("Close", success=True)
        self.close_button.hide()

        ButtonLayout.addWidget(self.close_button)
        ButtonLayout.addWidget(self.launch_button)
        ButtonLayout.addWidget(self.install_button)
        ButtonLayout.setAlignment(Qt.AlignCenter)
        # self.closeButton.setMaximumWidth(130)

        self.progressLayout = QHBoxLayout()
        self.progressLayout.setAlignment(Qt.AlignCenter)

        self.wait_label = QLabel()
        self.wait_label.setText("Installing, please wait ...")
        self.progressLayout.addWidget(self.animated_gif)
        self.progressLayout.addWidget(self.wait_label)

        self.progressLayout.addStretch()
        self.outer.addLayout(self.progressLayout)
        self.animated_gif.hide()
        self.wait_label.hide()

    def done(self, msg):
        self.launch_button.show()
        self.close_button.hide()
        self.animated_gif.hide()
        self.wait_label.hide()

        if InstallOptions.upgrade:
            restore_credentials_file()

            self.subtext.setText("Upgrade Successful")
            self.subtext.setStyleSheet("QLabel#subtext {color: #00a17b; font: 16pt}")

            self.upgrade_info.setText("Please restart Maya to complete the upgrade.")
            self.upgrade_info.setStyleSheet("QLabel#upgradeInfo {color: darkgray; font: 12pt}")
            self.upgrade_info.setWordWrap(True)

            self.launch_button.hide()
            self.close_button.show()

        # Install the Shelf
        if InstallOptions.install_shelf:
            from syncsketchGUI.actions import install_shelf, uninstall_shelf
            uninstall_shelf()
            install_shelf()

        # Load Plugin And Autoload it
        try:
            cmds.loadPlugin("SyncSketchPlugin")
            cmds.pluginInfo("SyncSketchPlugin", edit=True, autoload=True)
        except RuntimeError as error:
            LOG.error("Error while loading plugin: {}".format(error))

        # Create Default's for current OS
        self.create_good_defaults()

    def error(self, msg):
        LOG.error("error callback: {0}".format(msg))

        self.animated_gif.hide()
        self.wait_label.hide()
        self.launch_button.hide()
        self.info_widget.hide()

        self.subtext.setText("Error during installation:")
        self.subtext.setStyleSheet("QLabel#subtext {color: orangered; font: 14pt}")

        self.upgrade_info.setText(
            "{}\n\nSee the Maya Script Editor for more information".format(msg))
        self.upgrade_info.setStyleSheet("QLabel#upgradeInfo {color: darkgray; font: 10pt}")
        self.upgrade_info.setWordWrap(True)

        self.upgrade_info.show()
        self.close_button.show()

    def create_good_defaults(self):
        """
        Adds default setting's to have a good starting point for the tool
        """
        import yaml

        LOG.debug("sscache: {0}".format(Literals.SYNCSKETCH_INSTALL_PATH))
        syncsketch_cache = os.path.join(Literals.SYNCSKETCH_INSTALL_PATH, "config", "syncsketch_cache.yaml")
        LOG.debug("sscache: {0}".format(syncsketch_cache))

        with open(syncsketch_cache, "r") as f:
            config = yaml.safe_load(f)

        if Literals.PLATFORM == "Darwin":
            config["current_preset"] = "HD720p (OSX)"
        elif Literals.PLATFORM == "Windows":
            config["current_preset"] = "HD720p (Windows)"
        LOG.debug(config)

        with open(syncsketch_cache, "w") as f:
            yaml.dump(config, f)

    def __syncsketch_install(self):
        self.install_button.hide()
        self.close_button.hide()
        self.install_shelf.hide()
        self.animated_gif.show()
        self.wait_label.show()
        self.myThread = InstallThread()
        # self.connect(self.myThread, SIGNAL("finished()"), self.done)
        self.myThread.success.connect(self.done)
        self.myThread.error.connect(self.error)
        self.myThread.start()

    def __close_button(self):
        self.clean()
        self.close()

    def __launch_button(self):
        self.clean()
        self.close()
        # Open UI
        import syncsketchGUI
        reload(syncsketchGUI)
        syncsketchGUI.show_main_window()


def restore_credentials_file():
    # We assume that User already has a previous version installed
    import syncsketchGUI.lib.user as user

    current_user = user.SyncSketchUser()
    if InstallOptions.tokenData:
        current_user.set_name(InstallOptions.tokenData["username"])
        # todo we should remove api_key
        current_user.set_token(InstallOptions.tokenData["token"])
        current_user.set_api_key(InstallOptions.tokenData["token"])
        current_user.auto_login()


def download_and_install_ffmpeg_to_disc(platform=None, move_to_location=None):
    platform_mapping = {"Windows": "windows-64", "Darwin": "osx-64", "Linux": "linux-64"}

    _platform = platform_mapping[platform]

    response = urlopen(Request(FFMPEG_API_ENDPOINT, headers={"User-Agent": ""}), context=unverified_ssl_context)
    ffmpeg_resp = json.load(response)

    ffmpeg_url = ffmpeg_resp["bin"][_platform]["ffmpeg"]
    ffmpeg_zip_path = _make_temp_path("ffmpeg.zip")
    ffmpeg_extrated_path = _make_temp_path("ffmpeg_extracted")
    _download_to_path(ffmpeg_url, ffmpeg_zip_path)
    _extract_zip_file(ffmpeg_zip_path, ffmpeg_extrated_path)
    ffmpeg_bin_path = _find_bin_path(ffmpeg_extrated_path, "ffmpeg")

    ffprobe_url = ffmpeg_resp["bin"][_platform]["ffprobe"]
    ffprobe_zip_path = _make_temp_path("ffprobe.zip")
    ffprobe_extrated_path = _make_temp_path("ffprobe_extracted")
    _download_to_path(ffprobe_url, ffprobe_zip_path)
    _extract_zip_file(ffprobe_zip_path, ffprobe_extrated_path)
    ffprobe_bin_path = _find_bin_path(ffprobe_extrated_path, "ffprobe")

    LOG.info("Moving FFMPEG from to directory: {0}".format(move_to_location))
    if not os.path.isdir(move_to_location):
        os.makedirs(move_to_location)

    os.chmod(ffmpeg_bin_path, 0o755)
    os.chmod(ffprobe_bin_path, 0o755)
    shutil.copy(ffmpeg_bin_path, move_to_location)
    shutil.copy(ffprobe_bin_path, move_to_location)


def _make_temp_path(name):
    tmpdir = tempfile.mkdtemp()
    return os.path.join(tmpdir, name)


def _download_to_path(source_url, save_to_path):
    LOG.info("Download from {} to {}".format(source_url, save_to_path))
    with urlopen(source_url, context=unverified_ssl_context) as response, open(save_to_path, 'wb') as out_file:
        shutil.copyfileobj(response, out_file)


def _extract_zip_file(zip_path, extracted_path):
    LOG.info("Unzip from {} to {}".format(zip_path, extracted_path))
    zip_ref = zipfile.ZipFile(zip_path, "r")
    zip_ref.extractall(extracted_path)
    zip_ref.close()


def _find_bin_path(directory, name):
    bin_path = glob.glob(os.path.join(directory, "{}*".format(name)))[0]
    LOG.info("Found binary {} at {}".format(name, bin_path))
    return bin_path


def _install_maya_mod_file():
    mod_file = _get_mod_file_path()
    LOG.info("Installing Maya Mod File to {}".format(mod_file))
    with open(mod_file, "w") as f:
        f.write("+ syncsketch {version} .\syncsketch-{version} \n".format(version=_VERSION))
        f.write("MAYA_PLUG_IN_PATH +:= scripts\syncsketchGUI\plug-ins \n".format(version=_VERSION))
        f.write("PYTHONPATH +:= site-packages \n".format(version=_VERSION))


def _get_mod_file_path():
    mod_folder = get_maya_module_path()
    mod_file = os.path.join(mod_folder, "syncsketch-{version}.mod".format(version=_VERSION))
    return mod_file


def _run_subprocess(cmd, error_msg=None):
    LOG.debug("Calling command in subprocess: {0}".format(cmd))
    try:
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        stdout, stderr = proc.communicate()
    except Exception as e:
        if error_msg:
            msg = "{}: {}".format(error_msg, e)
        else:
            msg = "Failed to run subprocess: {}".format(cmd)
        raise Exception(msg)

    if proc.returncode:
        raise Exception("Subprocess failed with error code ({}), error {}".format(proc.returncode, stderr))


class InstallThread(QThread):
    """Main Process that drives all installation"""
    success = Signal(str)
    error = Signal(str)

    def __init__(self):
        QThread.__init__(self)

    def __del__(self):
        self.wait()

    def run(self):
        self.start_installation_process()

    @staticmethod
    def _install_pip_py27(tmpdir, delete_tmpdir, mayapy_path):
        # Create a temporary directory to act as a working directory if we were
        # not given one.
        if tmpdir is None:
            tmpdir = tempfile.mkdtemp()
            delete_tmpdir = False

        # Save get-pip.py
        pip_installer = os.path.join(tmpdir, "get-pip.py")
        if Literals.PLATFORM == "Darwin":
            if not INSTALL_SSGUI_ONLY:
                cmd = "curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o {0}".format(
                    pip_installer).split(
                    " ")
                _run_subprocess(cmd, "Failed to download pip installer")
        else:
            response = urlopen("https://bootstrap.pypa.io/pip/2.7/get-pip.py")
            data = response.read()
            with open(pip_installer, "w") as f:
                f.write(data)
        # Install pip
        cmd = "\"{0}\" \"{1}\" --user pip".format(mayapy_path, pip_installer)
        _run_subprocess(cmd, "Failed to install Pip")

        return tmpdir, delete_tmpdir

    @staticmethod
    def _prepend_to_sys_path(_path):
        if not _path:
            LOG.info("Can not find user site package path")
        elif _path not in sys.path:
            sys.path.insert(0, _path)
            LOG.info("Added module script path [{}] to system paths".format(_path))
        else:
            LOG.info("Module script path in system paths, path: {}".format(_path))

    def start_installation_process(self):
        LOG.info("Starting Installation Process")
        Literals.PLATFORM = platform.system()
        tmpdir = None
        delete_tmpdir = False
        errors = False

        mayapy_path = get_mayapy_path()
        install_folder_path = get_install_folder_path()
        maya_mod_file_path = _get_mod_file_path()

        if os.path.exists(install_folder_path) or os.path.exists(maya_mod_file_path):
            msg = "Version {} is already installed, skipping installation.".format(_VERSION)
            LOG.info(msg)
            LOG.info(
                ("If you want to reinstall, "
                 "please delete the folder {} and the file {} "
                 "and then run the installer again.").format(install_folder_path, maya_mod_file_path))
            self.error.emit(msg)
            return

        module_script_path = os.path.join(install_folder_path, "scripts")
        module_site_packages_path = os.path.join(install_folder_path, "site-packages")
        module_plugin_path = os.path.join(module_script_path, "syncsketchGUI", "plug-ins")

        if not os.path.exists(module_script_path):
            os.makedirs(module_script_path, exist_ok=True)
        if not os.path.exists(module_site_packages_path):
            os.makedirs(module_site_packages_path, exist_ok=True)

        LOG.info("module_script_path: {0}".format(module_script_path))
        LOG.info("module_site_packages_path: {0}".format(module_site_packages_path))

        ffmpeg_bin_folder_path = os.path.join(install_folder_path, "ffmpeg", "bin")
        Literals.SYNCSKETCH_INSTALL_PATH = os.path.join(module_script_path, "syncsketchGUI")

        try:
            if not INSTALL_SSGUI_ONLY:
                if sys.version_info.major == 3:
                    cmd = "\"{0}\" -m ensurepip --upgrade".format(mayapy_path)
                    _run_subprocess(cmd, "Failed to install Pip")
                elif sys.version_info.major == 2 and sys.version_info.minor == 7:
                    tmpdir, delete_tmpdir = self._install_pip_py27(tmpdir, delete_tmpdir, mayapy_path)
                else:
                    raise Exception("Unsupported Python version: {}".format(sys.version_info))

            # * By using target, pip show won't find this package anymore
            LOG.debug("install_folder_path: {}".format(install_folder_path))
            if os.path.isdir(install_folder_path):
                try:
                    shutil.rmtree(install_folder_path, ignore_errors=True)
                except Exception as e:
                    raise Exception(
                        "Failed to delete previous directory for a clean install {0} ".format(install_folder_path))

            # Install Dependencies
            LOG.info("Installing dependencies [{}] ...".format(PY_REQUIREMENTS))
            cmd = "\"{mayapy}\" -m pip install --target=\"{target}\" {packages}".format(
                mayapy=mayapy_path, target=module_site_packages_path, packages=" ".join(PY_REQUIREMENTS))
            if not INSTALL_SSGUI_ONLY:
                _run_subprocess(cmd, "Failed to install dependencies")

            LOG.info("Dependencies installed")

            os.environ["MAYA_PLUG_IN_PATH"] = ";".join([module_plugin_path, os.environ.get("MAYA_PLUG_IN_PATH", "")])
            LOG.info("Added module plugin path [{}] to MAYA_PLUG_IN_PATH".format(module_plugin_path))

            self._prepend_to_sys_path(module_script_path)
            self._prepend_to_sys_path(module_site_packages_path)

            # Install SyncsketchGUI
            LOG.info("Installing SyncsketchGUI for Maya")

            # this might be a re-install, so lets try unloading the plug-in to be clean
            try:
                cmds.unloadPlugin('SyncSketchPlugin')
            except Exception as e:
                print(e)

            if SYNCSKETCH_GUI_SOURCE_PATH.startswith("git+"):
                cmd = "\"{mayapy}\" -m pip install --upgrade --no-deps --target=\"{target}\" \"{package_path}\"".format(
                    mayapy=mayapy_path, target=module_script_path, package_path=SYNCSKETCH_GUI_SOURCE_PATH
                )
            else:
                # for testing purposes, install from local source as an editable package
                cmd = "\"{mayapy}\" -m pip install --upgrade --no-deps --editable \"{package_path}\"".format(
                    mayapy=mayapy_path, package_path=SYNCSKETCH_GUI_SOURCE_PATH
                )

            _run_subprocess(cmd, "Failed to install SyncsketchGUI")

            # Install Maya Mod File
            _install_maya_mod_file()

            # Download FFMPeg Binaries
            if not INSTALL_SSGUI_ONLY:
                LOG.info("Install FFMPEG Binaries to {}".format(ffmpeg_bin_folder_path))
                download_and_install_ffmpeg_to_disc(platform=Literals.PLATFORM,
                                                    move_to_location=ffmpeg_bin_folder_path)
                LOG.info("Finished Installing FFMPEG Binaries")

        except Exception as e:
            LOG.error(e)
            self.error.emit(str(e))
            errors = True
        finally:
            # Remove our temporary directory
            if delete_tmpdir and tmpdir:
                LOG.info("Cleaning up temporary files: {0}".format(tmpdir))
                shutil.rmtree(tmpdir, ignore_errors=True)

        if not errors:
            self.success.emit("Success")


_INSTALLER = None


def main():
    global _INSTALLER
    LOG.info("running SyncSketchInstaller Standalone")

    _INSTALLER = SyncSketchInstaller(get_maya_ui_parent())
    _INSTALLER.show()


def onMayaDroppedPythonFile(*args):
    main()


if __name__ == "__main__":
    main()
